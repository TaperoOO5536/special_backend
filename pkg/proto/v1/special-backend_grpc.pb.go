// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: special-backend.proto

package special_app_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpecialAppService_CreateUser_FullMethodName       = "/special_app_v1.SpecialAppService/CreateUser"
	SpecialAppService_UpdateUser_FullMethodName       = "/special_app_v1.SpecialAppService/UpdateUser"
	SpecialAppService_GetUser_FullMethodName          = "/special_app_v1.SpecialAppService/GetUser"
	SpecialAppService_GetIventInfo_FullMethodName     = "/special_app_v1.SpecialAppService/GetIventInfo"
	SpecialAppService_GetIvents_FullMethodName        = "/special_app_v1.SpecialAppService/GetIvents"
	SpecialAppService_CreateUserIvent_FullMethodName  = "/special_app_v1.SpecialAppService/CreateUserIvent"
	SpecialAppService_GetUserIventInfo_FullMethodName = "/special_app_v1.SpecialAppService/GetUserIventInfo"
	SpecialAppService_GetUserIvents_FullMethodName    = "/special_app_v1.SpecialAppService/GetUserIvents"
	SpecialAppService_UpdateUserIvent_FullMethodName  = "/special_app_v1.SpecialAppService/UpdateUserIvent"
	SpecialAppService_DeleteUserIvent_FullMethodName  = "/special_app_v1.SpecialAppService/DeleteUserIvent"
	SpecialAppService_GetItemInfo_FullMethodName      = "/special_app_v1.SpecialAppService/GetItemInfo"
	SpecialAppService_GetItems_FullMethodName         = "/special_app_v1.SpecialAppService/GetItems"
	SpecialAppService_CreateOrder_FullMethodName      = "/special_app_v1.SpecialAppService/CreateOrder"
	SpecialAppService_GetOrderInfo_FullMethodName     = "/special_app_v1.SpecialAppService/GetOrderInfo"
	SpecialAppService_GetOrders_FullMethodName        = "/special_app_v1.SpecialAppService/GetOrders"
	SpecialAppService_UpdateOrder_FullMethodName      = "/special_app_v1.SpecialAppService/UpdateOrder"
)

// SpecialAppServiceClient is the client API for SpecialAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecialAppServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	GetIventInfo(ctx context.Context, in *GetIventInfoRequest, opts ...grpc.CallOption) (*GetIventInfoResponse, error)
	GetIvents(ctx context.Context, in *GetIventsRequest, opts ...grpc.CallOption) (*GetIventsResponse, error)
	CreateUserIvent(ctx context.Context, in *CreateUserIventRequest, opts ...grpc.CallOption) (*GetUserIventInfoResponse, error)
	GetUserIventInfo(ctx context.Context, in *GetUserIventInfoRequest, opts ...grpc.CallOption) (*GetUserIventInfoResponse, error)
	GetUserIvents(ctx context.Context, in *GetUserIventsRequest, opts ...grpc.CallOption) (*GetUserIventsResponse, error)
	UpdateUserIvent(ctx context.Context, in *UpdateUserIventRequest, opts ...grpc.CallOption) (*GetUserIventInfoResponse, error)
	DeleteUserIvent(ctx context.Context, in *DeleteUserIventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetItemInfo(ctx context.Context, in *GetItemInfoRequest, opts ...grpc.CallOption) (*GetItemInfoResponse, error)
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error)
	GetOrderInfo(ctx context.Context, in *GetOrderInfoRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error)
}

type specialAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecialAppServiceClient(cc grpc.ClientConnInterface) SpecialAppServiceClient {
	return &specialAppServiceClient{cc}
}

func (c *specialAppServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SpecialAppService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetIventInfo(ctx context.Context, in *GetIventInfoRequest, opts ...grpc.CallOption) (*GetIventInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIventInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetIventInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetIvents(ctx context.Context, in *GetIventsRequest, opts ...grpc.CallOption) (*GetIventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIventsResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetIvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) CreateUserIvent(ctx context.Context, in *CreateUserIventRequest, opts ...grpc.CallOption) (*GetUserIventInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIventInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_CreateUserIvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetUserIventInfo(ctx context.Context, in *GetUserIventInfoRequest, opts ...grpc.CallOption) (*GetUserIventInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIventInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetUserIventInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetUserIvents(ctx context.Context, in *GetUserIventsRequest, opts ...grpc.CallOption) (*GetUserIventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIventsResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetUserIvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) UpdateUserIvent(ctx context.Context, in *UpdateUserIventRequest, opts ...grpc.CallOption) (*GetUserIventInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIventInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_UpdateUserIvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) DeleteUserIvent(ctx context.Context, in *DeleteUserIventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SpecialAppService_DeleteUserIvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetItemInfo(ctx context.Context, in *GetItemInfoRequest, opts ...grpc.CallOption) (*GetItemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetItemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetOrderInfo(ctx context.Context, in *GetOrderInfoRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetOrderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialAppServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*GetOrderInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderInfoResponse)
	err := c.cc.Invoke(ctx, SpecialAppService_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecialAppServiceServer is the server API for SpecialAppService service.
// All implementations must embed UnimplementedSpecialAppServiceServer
// for forward compatibility.
type SpecialAppServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*GetUserInfoResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserInfoResponse, error)
	GetIventInfo(context.Context, *GetIventInfoRequest) (*GetIventInfoResponse, error)
	GetIvents(context.Context, *GetIventsRequest) (*GetIventsResponse, error)
	CreateUserIvent(context.Context, *CreateUserIventRequest) (*GetUserIventInfoResponse, error)
	GetUserIventInfo(context.Context, *GetUserIventInfoRequest) (*GetUserIventInfoResponse, error)
	GetUserIvents(context.Context, *GetUserIventsRequest) (*GetUserIventsResponse, error)
	UpdateUserIvent(context.Context, *UpdateUserIventRequest) (*GetUserIventInfoResponse, error)
	DeleteUserIvent(context.Context, *DeleteUserIventRequest) (*emptypb.Empty, error)
	GetItemInfo(context.Context, *GetItemInfoRequest) (*GetItemInfoResponse, error)
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*GetOrderInfoResponse, error)
	GetOrderInfo(context.Context, *GetOrderInfoRequest) (*GetOrderInfoResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*GetOrderInfoResponse, error)
	mustEmbedUnimplementedSpecialAppServiceServer()
}

// UnimplementedSpecialAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpecialAppServiceServer struct{}

func (UnimplementedSpecialAppServiceServer) CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSpecialAppServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetIventInfo(context.Context, *GetIventInfoRequest) (*GetIventInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIventInfo not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetIvents(context.Context, *GetIventsRequest) (*GetIventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIvents not implemented")
}
func (UnimplementedSpecialAppServiceServer) CreateUserIvent(context.Context, *CreateUserIventRequest) (*GetUserIventInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserIvent not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetUserIventInfo(context.Context, *GetUserIventInfoRequest) (*GetUserIventInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIventInfo not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetUserIvents(context.Context, *GetUserIventsRequest) (*GetUserIventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIvents not implemented")
}
func (UnimplementedSpecialAppServiceServer) UpdateUserIvent(context.Context, *UpdateUserIventRequest) (*GetUserIventInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIvent not implemented")
}
func (UnimplementedSpecialAppServiceServer) DeleteUserIvent(context.Context, *DeleteUserIventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserIvent not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetItemInfo(context.Context, *GetItemInfoRequest) (*GetItemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemInfo not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedSpecialAppServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*GetOrderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetOrderInfo(context.Context, *GetOrderInfoRequest) (*GetOrderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}
func (UnimplementedSpecialAppServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedSpecialAppServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*GetOrderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedSpecialAppServiceServer) mustEmbedUnimplementedSpecialAppServiceServer() {}
func (UnimplementedSpecialAppServiceServer) testEmbeddedByValue()                           {}

// UnsafeSpecialAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecialAppServiceServer will
// result in compilation errors.
type UnsafeSpecialAppServiceServer interface {
	mustEmbedUnimplementedSpecialAppServiceServer()
}

func RegisterSpecialAppServiceServer(s grpc.ServiceRegistrar, srv SpecialAppServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpecialAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpecialAppService_ServiceDesc, srv)
}

func _SpecialAppService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetIventInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIventInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetIventInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetIventInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetIventInfo(ctx, req.(*GetIventInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetIvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetIvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetIvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetIvents(ctx, req.(*GetIventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_CreateUserIvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserIventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).CreateUserIvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_CreateUserIvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).CreateUserIvent(ctx, req.(*CreateUserIventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetUserIventInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIventInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetUserIventInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetUserIventInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetUserIventInfo(ctx, req.(*GetUserIventInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetUserIvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetUserIvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetUserIvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetUserIvents(ctx, req.(*GetUserIventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_UpdateUserIvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).UpdateUserIvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_UpdateUserIvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).UpdateUserIvent(ctx, req.(*UpdateUserIventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_DeleteUserIvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserIventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).DeleteUserIvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_DeleteUserIvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).DeleteUserIvent(ctx, req.(*DeleteUserIventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetItemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetItemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetItemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetItemInfo(ctx, req.(*GetItemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetOrderInfo(ctx, req.(*GetOrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialAppService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialAppServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpecialAppService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialAppServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpecialAppService_ServiceDesc is the grpc.ServiceDesc for SpecialAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpecialAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "special_app_v1.SpecialAppService",
	HandlerType: (*SpecialAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _SpecialAppService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SpecialAppService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _SpecialAppService_GetUser_Handler,
		},
		{
			MethodName: "GetIventInfo",
			Handler:    _SpecialAppService_GetIventInfo_Handler,
		},
		{
			MethodName: "GetIvents",
			Handler:    _SpecialAppService_GetIvents_Handler,
		},
		{
			MethodName: "CreateUserIvent",
			Handler:    _SpecialAppService_CreateUserIvent_Handler,
		},
		{
			MethodName: "GetUserIventInfo",
			Handler:    _SpecialAppService_GetUserIventInfo_Handler,
		},
		{
			MethodName: "GetUserIvents",
			Handler:    _SpecialAppService_GetUserIvents_Handler,
		},
		{
			MethodName: "UpdateUserIvent",
			Handler:    _SpecialAppService_UpdateUserIvent_Handler,
		},
		{
			MethodName: "DeleteUserIvent",
			Handler:    _SpecialAppService_DeleteUserIvent_Handler,
		},
		{
			MethodName: "GetItemInfo",
			Handler:    _SpecialAppService_GetItemInfo_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _SpecialAppService_GetItems_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _SpecialAppService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderInfo",
			Handler:    _SpecialAppService_GetOrderInfo_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _SpecialAppService_GetOrders_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _SpecialAppService_UpdateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "special-backend.proto",
}
